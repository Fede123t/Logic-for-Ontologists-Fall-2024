A language is unsatisfiable (Xunsat) iff among its formulae it is present or can be inferred an unsatisfiable formula, i.e. a contradiction, like a&~a.
A language is undecidable (Xnd) iff there is no Turing Machine that can decide whether a formula of the language is part of that logic or not. The Turing Machine grants the existence of an algorithm that can be followed to decide the issue. 
We are shown, in the table of the assignment that some fragments of First Order Logic, which is a particular kind of language, with some combinations of logical properties for their predicates, are unsatisfiable or undecidable. For example, a logic with a predicate that is both symmetric and asymmetric will admit sentences like P(a,b), P(b,a) and ~P(b,a), which is a contradiction. I notice the only combinations of logical properties that lead to unsatisfiability are pairs of contrary properties, which are three combinations in total, out of twenty-six.
The table also shows examples of undecidable logics, like those with predicates that are both transitive and functional, or those with predicate that are both irreflexive and transitive. Out of the seven logical properties that can be combined in pairs for the same predicates, only four combinations out of the twenty-six lead to undecidability.
The proof that a logic, given its signature, formation rules and rules of inference, is undecidable could consist in reducing the problem to one of the many problems which we already know are undecidable, like the Halting problem. Instead, since the number of possible Turing Machines is countably infinite, checking that none of them can decide the language in question would be impossible. Instead, to prove that a logic is decidable, we would just need one Turing Machine that decides it. 
